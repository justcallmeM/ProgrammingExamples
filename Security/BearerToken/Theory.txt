
Bearer Authentication (also called token authentication) is an HTTP 
authnetication scheme that involves security tokens called bearer tokens. 

The name "Bearer Authentication" can be understood as "give access to 
the bearer of this token." The bearer token is a cryptic string, 
usually generated by the server in response to a login request. 

The client must send this token in the Authorization header when making 
requests to protected resources. The server then validates the token and, 
if it is valid, allows the client to access the protected resources.

__________________________________________________________________________
THe general HTTP Authnetication framework looks like this:

1. CLient Request:
The client makes a simple HTTP request (GET, POST, PUT, DELETE) to the server.

GET /protected-resource HTTP/1.1
Host: example.com


2. Server Response with 401 Unauthorized:
The server response to the client with a 401 (Unauthorized) response status code and provides information on how to authenticate.
The response includes a WWW-Authenticate header that specifies the authentication method to be used.
For example, if the server is using Bearer token-based authentication, the response might look like this:

HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example", error="invalid_token", error_description="Token not found"


3. Client Presents Credentials:
A client that wants to authenticate itself with the server can do so by including an Authorization request header with the credentials.
This typically involves presenting a password prompt to the user and then issuing the request including the corret Authorization header.
For example, the client might make a request with a Bearer token like this:

GET /protected-resource HTTP/1.1
Host: example.com
Authorization: Bearer <access-token>


4. Server Validates the Token:
The server received the request and extracts the token from the Authorization header.
The server then validates the token (e.g., by checking the signature, issuer, expiry, etc.) to ensure it is valid.


5. Access Granted or Denied:
If the token is valid, the server grants access and response with the requested resource.
If the token is invalid, the server responds with another 401 Unauthorized or a 403 Forbidden status code, indicating that the authentication failed.

HTTP/1.1 200 OK
Content-Type: application/json
{
    "data": "This is a protected resource"
}

__________________________________________________________________________

https://swagger.io/docs/specification/authentication/bearer-authentication/